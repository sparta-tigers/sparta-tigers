name: CI/CD to EC2

on:
  push:
    branches:
      - "main"
      - "dev"

env:
  ECS_CLUSTER: sparta-tigers-cluster
  ECS_SERVICE: sparta-tigers-task-service
  CONTAINER_NAME: sparta-tigers-container
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/sparta-tigers

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      image-tag: ${{ steps.git-info.outputs.tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Lint
        uses: gradle/gradle-build-action@v2
        with:
          arguments: spotlessCheck

      - name: Test
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Git SHA
        id: git-info
        run: |
          IMAGE_TAG=main-${{ github.sha }}
#         build 잡에서 사용할 환경 변수
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
#         deploy 잡으로 전달할 출력값
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push docker image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-22.04

    needs: build

    if: github.ref == 'refs/heads/main' # main 브랜치만 배포

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Replace image URI and inject environment variables
        run: |
          IMAGE_URI=${IMAGE_NAME}:${IMAGE_TAG}
          export DB_URL=${{ secrets.DATABASE_PROD_URL_EC2 }}
          export DB_USER=${{ secrets.DATABASE_PROD_USERNAME }}
          export DB_PASSWORD=${{ secrets.DATABASE_PROD_PASSWORD }}
          export CLIENT_ID=${{ secrets.CLIENT_ID }}
          export CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export REDIS_HOST_PROD=${{ secrets.REDIS_HOST_PROD }}
          export S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          export S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
          export S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}
          export S3_REGION=${{ secrets.AWS_REGION }}
          
          sed "s|DOCKER_IMAGE_URI_REPLACE_ME|$IMAGE_URI|g" aws/ecs/task-definition.json > aws/ecs/task-definition-tmp.json
          
          envsubst '$DB_URL $DB_USER $DB_PASSWORD $S3_BUCKET_NAME $CLIENT_ID $CLIENT_SECRET $JWT_SECRET $REDIS_HOST_PROD $S3_ACCESS_KEY $S3_REGION $S3_SECRET_KEY' < aws/ecs/task-definition-tmp.json > aws/ecs/task-definition-final.json

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: aws/ecs/task-definition-final.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
