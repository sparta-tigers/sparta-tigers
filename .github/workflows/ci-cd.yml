name: CI/CD to EC2

on:
  push:
    branches:
      - "main"
      - "dev"

env:
  ECS_CLUSTER: sparta-tigers-cluster
  ECS_SERVICE: sparta-tigers-task-service
  CONTAINER_NAME: sparta-tigers-container
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/sparta-tigers

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      image-tag: ${{ steps.git-info.outputs.tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Lint
        uses: gradle/gradle-build-action@v2
        with:
          arguments: spotlessCheck

      - name: Test
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Git SHA
        id: git-info
        run: |
               IMAGE_TAG=main-${{ github.sha }}
               echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
               echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push docker image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-22.04

    needs: build

    env:
      IMAGE_TAG: ${{ needs.build.outputs.image-tag }}

    if: github.ref == 'refs/heads/main' # main 브랜치만 배포

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set file permissions for task-definition.json
        run: |
          sudo chmod 644 "${GITHUB_WORKSPACE}/aws/ecs/task-definition.json"

      - name: Set directory permissions for aws/ecs
        run: |
          sudo chmod -R 755 "${GITHUB_WORKSPACE}/aws/ecs"

      - name: Replace image URI and inject environment variables
        run: |
          IMAGE_URI=${IMAGE_NAME}:${IMAGE_TAG}

          jq \
            --arg IMAGE_URI "$IMAGE_URI" \
            --arg DB_URL "${{ secrets.DATABASE_PROD_URL_EC2 }}" \
            --arg DB_USER "${{ secrets.DATABASE_PROD_USERNAME }}" \
            --arg DB_PASSWORD "${{ secrets.DATABASE_PROD_PASSWORD }}" \
            --arg KAKAO_CLIENT_ID "${{ secrets.KAKAO_CLIENT_ID }}" \
            --arg KAKAO_CLIENT_SECRET "${{ secrets.KAKAO_CLIENT_SECRET }}" \
            --arg GOOGLE_CLIENT_ID "${{ secrets.GOOGLE_CLIENT_ID }}" \
            --arg GOOGLE_CLIENT_SECRET "${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --arg NAVER_CLIENT_ID "${{ secrets.NAVER_CLIENT_ID }}" \
            --arg NAVER_CLIENT_SECRET "${{ secrets.NAVER_CLIENT_SECRET }}" \
            --arg JWT_SECRET "${{ secrets.JWT_SECRET }}" \
            --arg REDIS_HOST_PROD "${{ secrets.REDIS_HOST_PROD }}" \
            --arg S3_BUCKET_NAME "${{ secrets.S3_BUCKET_NAME }}" \
            --arg S3_ACCESS_KEY "${{ secrets.S3_ACCESS_KEY }}" \
            --arg S3_SECRET_KEY "${{ secrets.S3_SECRET_KEY }}" \
            --arg S3_REGION "${{ secrets.AWS_REGION }}" \
            --arg default_image_path "${{ secrets.DEFAULT_IMAGE_PATH }}" \
            '.containerDefinitions[0].image = $IMAGE_URI |
             .containerDefinitions[0].environment = [
                {"name": "database_prod_url", "value": $DB_URL},
                {"name": "database_prod_username", "value": $DB_USER},
                {"name": "database_prod_password", "value": $DB_PASSWORD},
                {"name": "bucket_name", "value": $S3_BUCKET_NAME},
                {"name": "kakao_client_id", "value": $KAKAO_CLIENT_ID},
                {"name": "kakao_client_secret", "value": $KAKAO_CLIENT_SECRET},
                {"name": "google_client_id", "value": $GOOGLE_CLIENT_ID},
                {"name": "google_client_secret", "value": $GOOGLE_CLIENT_SECRET},
                {"name": "naver_client_id", "value": $NAVER_CLIENT_ID},
                {"name": "naver_client_secret", "value": $NAVER_CLIENT_SECRET},
                {"name": "jwt_secret", "value": $JWT_SECRET},
                {"name": "redis_host_prod", "value": $REDIS_HOST_PROD},
                {"name": "S3access_key", "value": $S3_ACCESS_KEY},
                {"name": "S3secret_key", "value": $S3_SECRET_KEY},
                {"name": "S3region", "value": $S3_REGION},
                {"name": "default_image_path", "value": $DEFAULT_IMAGE_PATH}
             ]' \
            "${GITHUB_WORKSPACE}/aws/ecs/task-definition.json" > "${GITHUB_WORKSPACE}/aws/ecs/task-definition-final.json"

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: aws/ecs/task-definition-final.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
