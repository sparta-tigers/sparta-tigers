plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.diffplug.spotless'
}

apply from: 'lint.gradle'

group = "${projectGroup}"
version = "${applicationVersion}"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.javaVersion)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // === Spring Boot Starters ===
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // JPA (데이터베이스 ORM)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Spring Security (인증/인가)
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Bean Validation (입력값 검증)
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // 웹 애플리케이션 (REST API 포함)
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // WebSocket (실시간 통신)
    implementation 'org.redisson:redisson-spring-boot-starter:3.23.5'
    // Redisson (Redis 분산락)

    // === 데이터베이스 드라이버 ===
    runtimeOnly 'com.mysql:mysql-connector-j'
    // MySQL JDBC 드라이버

    // === 개발 편의성 ===
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // 자동 재시작, 라이브 리로드 등 개발 편의 기능

    // === Lombok ===
    compileOnly 'org.projectlombok:lombok'
    // 컴파일 시만 적용 (Getter/Setter 등 자동 생성)
    annotationProcessor 'org.projectlombok:lombok'
    // Lombok을 위한 Annotation Processor

    // === 설정 관련 ===
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    // @ConfigurationProperties 지원

    // === 테스트 관련 ===
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // 기본 테스트 도구 (JUnit, AssertJ 등)
    testImplementation 'org.springframework.security:spring-security-test'
    // Security 테스트 지원
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // JUnit 플랫폼 런처 (테스트 실행기)


    // === QueryDSL ===
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // === Redis ===
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'


}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory = file(querydslDir)
}

clean {
    delete file(querydslDir)
}

tasks.named('test') {
    useJUnitPlatform()
}


